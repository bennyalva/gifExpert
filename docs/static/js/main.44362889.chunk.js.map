{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories1","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","useFetchGifs","loadding","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","console","log","img2","key","GifExpertApp","categories","setCategories","categorie","ReactDOM","render","document","getElementById"],"mappings":"qMA8BeA,EA5BK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAAoB,EACFC,mBAAS,IADP,mBAC/BC,EAD+B,KACnBC,EADmB,KActC,OACI,0BAAMC,SATY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,OAMjB,4CACG,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBU,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,Y,uBCLlBG,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DACbC,EADa,yDAC2CC,UAAUH,GADrD,sDAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAHY,kBAIZA,EAAKC,KAAI,SAAAC,GAAQ,IAAD,EACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,SARvB,2CAAH,sDCkBLY,EAfM,SAACd,GAAc,IAAD,EACPd,mBAAS,CAC/BqB,KAAK,GACLQ,UAAU,IAHmB,mBAC1BC,EAD0B,KACnBC,EADmB,KAYjC,OAPAC,qBAAU,WACRnB,EAAQC,GACPmB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBV,KAAMa,EACNL,UAAU,SAEd,CAACf,IACIgB,GCJMK,EATK,SAAC,GAAkB,IAAjBV,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACzB,OACI,yBAAKoB,UAAU,0CACX,yBAAKC,IAAKrB,EAAKsB,IAAMb,IACrB,2BAAIA,KCFHc,EAAU,SAAC,GAAgB,IAAfzB,EAAc,EAAdA,SAAc,EACFc,EAAad,GAAjCY,EADsB,EAC5BL,KAAcQ,EADc,EACdA,SAGrB,OAFAW,QAAQC,IAAI,eAAgB3B,GAGxB,oCACA,wBAAIsB,UAAU,qCAAuCtB,GACpDe,GAAY,uBAAGO,UAAU,oCAAb,eACb,yBAAKA,UAAU,aAGHV,EAAOJ,KAAI,SAAAoB,GAAI,OACb,kBAAC,EAAD,iBACMA,EADN,CAEEC,IAAKD,EAAKlB,YCQnBoB,EAtBM,WAAO,IAAD,EAEa5C,mBAAS,CAAC,gBAFvB,mBAEhB6C,EAFgB,KAEJC,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAa/C,eAAiB+C,IAC9B,6BACA,4BAEQD,EAAWvB,KAAI,SAACyB,GAAD,OACZ,kBAAC,EAAD,CACKJ,IAAKI,EACLjC,SAAUiC,UCbtCC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.44362889.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\nconst AddCategory = ({setCategories1}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handlerChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handlerSubmit = (e) => {\n        e.preventDefault();// no recargar lo del navegador\n        if (inputValue.trim().length > 2){\n            setCategories1(cats => [inputValue,...cats ]);\n            setInputValue('')\n        }\n        \n    }\n    return (\n        <form onSubmit={handlerSubmit}>\n         <h2>Add category</h2> \n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handlerChange}\n            />  \n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories1: PropTypes.func.isRequired\n}\nexport default AddCategory\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?limit=2&q=${encodeURI(category)}&api_key=wQUlLL9jjvzDw7o54cdPtkRHU83MFIna`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    return data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n};","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nconst useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n      data:[],\n      loadding: true\n  })\n  useEffect(() =>{\n    getGifs(category)\n    .then(imgs => setstate({\n        data: imgs,\n        loadding: false\n    }))\n  },[category]);\n  return state;\n}\n\nexport default useFetchGifs\n","import React from 'react'\n\nconst GifGridItem = ({title, url}) => {\n    return (\n        <div className='card animate__animated animate__bounce'>\n            <img src={url} alt={ title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    const {data: images, loadding} = useFetchGifs(category);\n    console.log('new category', category)\n    \n    return (\n        <>\n        <h3 className=\"animate__animated animate__bounce\" >{ category}</h3>\n        {loadding && <p className=\"animate__animated animate__flash\">Loading....</p>}\n        <div className=\"card-grid\">\n            \n                {\n                    images.map(img2 => (\n                      <GifGridItem \n                        {...img2}\n                        key={img2.id} \n                      /> \n                    ))\n                }\n        </div> \n        </>    \n    )\n}\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon ball']);\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories1={ setCategories} />\n            <hr></hr>\n            <ol>\n                {\n                    categories.map((categorie) => (\n                       <GifGrid \n                            key={categorie}\n                            category={categorie}\n                       />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}